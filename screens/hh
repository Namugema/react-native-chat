import React, { useCallback, useState, useLayoutEffect } from 'react';
import { View, Text, StyleSheet, TouchableOpacity } from 'react-native';
import { Avatar } from 'react-native-elements';
import { auth, db } from '../firebase';
import { signOut } from 'firebase/auth';
import { collection, addDoc, getDocs, query, orderBy, onSnapshot, where, updateDoc, setDoc, doc } from 'firebase/firestore';
import { GiftedChat } from 'react-native-gifted-chat';
import { or } from 'react-native-reanimated';


function updateChatlist({_id, userGroup, user, createdAt, text}){

        setDoc(doc(db,'chatList', userGroup), {
            _id: _id,
            createdAt: createdAt,
            text: text,
            user: user,
          })

          return null;
    }

const Chat = ({ navigation }) => {
    const [messages, setMessages] = useState([]);
    const signOutNow = () => {
        signOut(auth).then(() => {
            // Sign-out successful.
            navigation.replace('Login');
        }).catch((error) => {
            // An error happened.
        });
    }
    useLayoutEffect(() => {

        const q = query(collection(db, 'chats'), where('userGroup', '==', 'flav@gmail.com,samanthanamugema@gmail.com'), orderBy('createdAt', 'desc'))

        const unsubscribe = onSnapshot(q, (snapshot) => setMessages(
            snapshot.docs.map(doc => ({
                _id: doc.data()._id,
                userGroup: doc.data().userGroup,
                createdAt: doc.data().createdAt.toDate(),
                text: doc.data().text,
                user: doc.data().user,

            }))
        ));

        return () => {
          unsubscribe();
        };

    }, [navigation]);

    const onSend = useCallback((messages = []) => {
        const { _id, userGroup, createdAt, text, user,} = messages[0]

        addDoc(collection(db, 'chats'), { _id, userGroup, createdAt, text, user });

        updateChatlist({_id, userGroup, user, createdAt, text})
    }, []);

    return (
        <GiftedChat
                messages={messages}
                //showAvatarForEveryMessage={true}
                onSend={messages => onSend(messages)}
                user={auth?.currentUser?.email}

                
            />


    );
}

export default Chat;

const styles = StyleSheet.create({
    container: {
      flex: 1,
      alignItems: 'center',
      padding: 10,
      marginTop: 100,
  },
  
  });